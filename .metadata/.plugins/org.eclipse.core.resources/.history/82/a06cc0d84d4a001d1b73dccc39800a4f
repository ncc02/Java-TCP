import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Vector;

import javax.swing.*;

public class TimSoClient extends JFrame implements MouseListener,Runnable {
	public static void main(String[] args) {
		new JoinTimSo();
	}
	
	int n = 5;
	int s = 100;
	int os = 50;
	int matran[][] = new int[n][n];
	Random rand = new Random();
	List<Point> dadanh = new ArrayList<Point>();
    Vector<Integer> mau= new Vector<Integer>();
	DataInputStream dis;
	DataOutputStream dos;
 
	JFrame fr= new JFrame();
	public void JoinTimSo(){
	        fr.setTitle("Join tim so");
	        fr.setSize(400, 300);
	        fr.setDefaultCloseOperation(3);
	        fr.setLayout(null);

	        JLabel lb= new JLabel("Lenh: ");
	        lb.setBounds(50, 50, 50, 50);
	        
	        JTextField tf= new JTextField();
	        tf.setBounds(100, 50, 200, 50);
	        
	        JButton btn= new JButton("Sent");
	        btn.setBounds(100, 125, 200, 50);
	        
	        JLabel msg= new JLabel("Nhap lenh: \'want to join\' de join (max=4)!");
	        msg.setBounds(50, 200, 200, 50);
	        
	        
	        btn.addActionListener((ActionListener) new ActionListener(){
	            @Override
	            public void actionPerformed(ActionEvent e) {
	                if (tf.getText().equals("")) 
	                    msg.setText("Input can't be empty");
	                else
	                if (tf.getText().equals("want to join")){
	                    new TimSoClient();
	                    fr.dispose();
	                }
	                else
	                    msg.setText("Sai cu phap!");
	            }
	        });

	        
	        fr.add(lb);   fr.add(tf);
	        fr.add(btn); 
	        fr.add(msg);
	        fr.setVisible(true);
	    }
	
	public TimSoClient() {
		this.setSize(n * s + 2 * os, n * s + 4 * os);
		this.setTitle("Caro");
		this.setDefaultCloseOperation(2);
		this.addMouseListener(this);
                
		try {
			Socket soc = new Socket("192.168.1.5",5000);
			dis = new DataInputStream(soc.getInputStream());
			dos = new DataOutputStream(soc.getOutputStream());
		}catch(Exception e) {}

        new Thread(this).start();
		this.setVisible(true);


		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				matran[i][j] = i * n + j + 1;
			}
		}
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				int tmp= matran[i][j];
				matran[i][j]= matran[(j+n/2)%n][(i+n/2)%n];
				matran[(j+n/2)%n][(i+n/2)%n]= tmp;
			}
		}

		this.setVisible(true);
	}

	public void paint(Graphics g) {
		g.setColor(Color.WHITE);
		g.fillRect(0, 0, this.getWidth(), this.getHeight());


		for (int i = 0; i < dadanh.size(); i++) {
			if (mau.get(i) == 1) g.setColor(Color.green);
			if (mau.get(i) == 2) g.setColor(Color.red);
			if (mau.get(i) == 3) g.setColor(new Color(192, 0, 255));
			if (mau.get(i) == 4) g.setColor(Color.yellow);
			
			
			int ix = dadanh.get(i).x;
			int iy = dadanh.get(i).y;
			int x = os + ix * s;
			int y = os + iy * s;
			g.fillRect(x, y, s, s);;
		}
		
		g.setColor(Color.BLACK);
		for (int i = 0; i <= n; i++) {
			g.drawLine(os, os + i * s, os + n * s, os + i * s);
			g.drawLine(os + i * s, os, os + i * s, os + n * s);
		}
		g.setFont(new Font("arial", Font.BOLD, s/3));
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				String str = matran[i][j]+"";
				if (matran[i][j]<10) str = "00" + str;
				else if (matran[i][j]<100) str = "0" + str;
				int x = os + i * s + s / 2 - s / 4;
				int y = os + j * s + s / 2 + s / 4 - s/8;
				g.drawString(str, x, y);
			}
		}
	}

	@Override
	public void mouseClicked(MouseEvent e) {
		int x = e.getX();
		int y = e.getY();
		if (x < os || x >= os + n * s)
			return;
		if (y < os || y >= os + n * s)
			return;
		int ix = (x - os) / s;
		int iy = (y - os) / s;
		for (Point d : dadanh) {
			if (ix == d.x && iy == d.y)
				return;
		}
		if (matran[ix][iy]!=dadanh.size()+1) return;
		
		try {
			dos.writeUTF(ix+","+iy);
		}catch(Exception e1) {}
	}

    
    public void run() {
		while(true) {
			try {
				String s = dis.readUTF();
				
				if (s.equals("you are a viewer")) {
					JOptionPane.showMessageDialog(this, s, "Server to Client", 
                            JOptionPane.INFORMATION_MESSAGE);
					continue;
				}
				else 
				if (s.equals("you are a player")){
					JOptionPane.showMessageDialog(this, s, "Server to Client", 
                            JOptionPane.INFORMATION_MESSAGE);
					continue;
				}
				
				int ix = Integer.parseInt(s.split(",")[0]);
				int iy = Integer.parseInt(s.split(",")[1]);
				int imau= Integer.parseInt(s.split(",")[2]);
				dadanh.add(new Point(ix, iy));
				mau.add(imau);
				
				this.repaint();
			}catch(Exception e) {
				
			}
		}
	}


	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub
	}
	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub
	}
	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub

	}
	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub
	}

}
